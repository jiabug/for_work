package Bit_manipulation;

import java.util.ArrayList;
import java.math.*;

/*
 * An array A contains all the integers from 0 to n, except for one number which is missing. In this
 * problem, we cannot access an entire integer in A with a single operation. The elements of A are 
 * represented in binary, and the only operation we can use to access them is "fetch the jth bit of
 * A[i]." which takes constant time. Write code to find the missing integer. Can you do it in O(n) time?
 */
public class e7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(Integer.SIZE);
		System.out.println(Integer.MAX_VALUE);
		System.out.println(Integer.toBinaryString(Integer.MAX_VALUE));
		System.out.println(Integer.MIN_VALUE);
		System.out.println(Integer.toBinaryString(Integer.MIN_VALUE));
	}
	public int findMissing(ArrayList<String> array){
		return findMissing(array,0);
	}
	public int findMissing(ArrayList<String> input, int column){
		if(column >= Integer.SIZE){
			return 0;
		}
		ArrayList<String> oneBits = new ArrayList<String>(input.size() / 2);
		ArrayList<String> zeroBits = new ArrayList<String>(input.size() / 2);
		
		for(String s:input){
			if(s.charAt(column) == '1'){
				oneBits.add(s);
			} else {
				zeroBits.add(s);
			}
		}
		if(oneBits.size() >= zeroBits.size() ){
			int v = findMissing(zeroBits, column + 1);
			return (v << 1) | 0;
		} else {
			int v = findMissing(oneBits, column + 1);
			return (v << 1) | 1;
		}
			
	}

}
