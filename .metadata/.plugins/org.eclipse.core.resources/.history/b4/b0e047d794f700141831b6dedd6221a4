package Bit_manipulation;

import java.util.ArrayList;
import java.math.*;

/*
 * An array A contains all the integers from 0 to n, except for one number which is missing. In this
 * problem, we cannot access an entire integer in A with a single operation. The elements of A are 
 * represented in binary, and the only operation we can use to access them is "fetch the jth bit of
 * A[i]." which takes constant time. Write code to find the missing integer. Can you do it in O(n) time?
 */
public class e7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	public int findMissing(ArrayList<BitInteger> array){
		return findMissing(array,0);
	}
	public int findMissing(ArrayList<BitInteger> input, int column){
		if(column >= BitInteger.+)
	}

}
