package Mathematics_and_Probability;
/*
 * Given two squares on a two-dimensional plane, find a line that would cut these two squares in half.
 * Assume that the top and bottom sides of the square run parallel to the x-axis.
 */
public class e5 {
	
	public double top;
	public double bottom;
	public double left;
	public double right;
	public double size;
	
	public e5(double left, double top, double size){
		this.left = left;
		this.right = left + size;
		this.top = top;
		this.bottom = top - size;
		this.size = size;
	}
	
	public Point middle(){
		return new Point((this.top + this.bottom) / 2.0, (this.left + this.right) / 2.0);
	}
	
	public Point extend(Point mid1, Point mid2, double size){
		
		double xdir = mid1.x < mid2.x ? -1 : 1;
		double ydir = mid1.y < mid2.y ? -1 : 1;
		
		if (mid1.x == mid2.x){
			return new Point(mid1.x, mid1.y + ydir * size / 2.0);
		}
		
		double x = 0;//we should initiate this parameter.
		double y = 0;
		
		double slope = (mid1.y - mid2.y) / (mid1.x - mid2.x);
		
		if (Math.abs(slope) == 1){
			x = mid1.x + xdir * size / 2.0;
			y = mid1.y + ydir * size / 2.0;
		} else if (Math.abs(slope) > 1){
			y = mid1.y + ydir * size / 2.0;
			x = (y - mid1.y) / slope + mid1.x;
		} else {
			x = mid1.x + xdir * size / 2.0;
			y = (x - mid1.x) * slope + mid1.y;
		}
		
		return new Point(x, y);
	}
	
	public Line cut(e5 other){
		Point p1 = extend(this.middle(), other.middle(),this.size);
		Point p2 = extend(this.middle(), other.middle(),-1 * this.size);//do not use -this.size, we need you multiply
		Point p3 = extend(other.middle(), this.middle(), other.size);
		Point p4 = extend(other.middle(), this.middle(),-1 * other.size);
		
		Point start = p1;
		Point end = p1;
		
		Point [] l = {p2,p3,p4};
		
		for (int i = 0; i < 3; i++){
			if (l[i].x < start.x || (l[i].x == start.x && l[i].y > start.y)){
				start = l[0];
			}
			if(l[i].x > end.x ||(l[i].x == end.x && l[i].y < end.y)){
				end = l[i];
			}
		}
		
		return new Line(start, end);
	}


}
